name: Build and Deploy to AWS

on:
  push:
    branches: [ "main" ]

env:
  IMAGE_NAME: ruu7/lesson8-cicd-demo # <enter-docker-image-name-here>   # Format: <dockerhub_account>/<repo>
  IMAGE_TAG: ${{ github.sha }} # DONT CHANGE. ties this to your git commit

jobs:
  build-and-publish-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v3 # must checkout, then can run commands
        
      - name: Build and tag Docker image
        run: docker build -t $IMAGE_NAME:$IMAGE_TAG -t $IMAGE_NAME:latest .
      # e.g. dockeruser/cicd-demo:tag

      - name: Login to DockerHub
        uses: docker/login-action@v2 #github.com/docker/login-action's repo
        with: # args
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
        
      - name: Publish Docker image to Docker Hub
        run: |
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest

  deploy-docker-image:
    runs-on: ubuntu-latest
    needs: [build-and-publish-docker-image]  # requires successful completion
    # directed acyclic graph (build < deploy; will only run deploy aft build success)
    steps:
      - name: Set up SSH connection to AWS remote server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir ~/.ssh/
          echo "${SSH_KEY}" > ~/.ssh/key.pem
          chmod 400 ~/.ssh/key.pem
          cat >> ~/.ssh/config << END
          Host remote_host
            HostName ${SSH_HOST}
            User ${SSH_USERNAME}
            IdentityFile ~/.ssh/key.pem
            StrictHostKeyChecking no
          END
      
      - name: Deploy Docker container on AWS via SSH
        run: |  # Pre-requisite: docker has been installed on remote machine
          ssh remote_host "docker ps -a"                         # remote_host as defined in ~/.ssh/config
          ssh remote_host "docker ps -q | xargs -r docker stop"  # stops any running container
          ssh remote_host "docker pull ${IMAGE_NAME}"
          ssh remote_host "docker run -d -p 80:80 ${IMAGE_NAME}:latest"